# -*- coding: utf-8 -*-
"""Dataset Wine

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oX3a6XTVEfrS5Rlr6tIjtCc2hqcRG0rx

Import Modoules dan dependencies
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
# %matplotlib inline
warnings.filterwarnings('ignore')
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

"""Data Collection"""

#Data collection menambah/import dataset atau data collection nya
dataset_wine = pd.read_csv('winequality-red.csv')

#melihat total data yang ada di dataset win
dataset_wine.shape

dataset_wine.describe()

dataset_wine.info()

#melihat 5 baris dari dataset wine
dataset_wine.head()

#Melihat atau mengecek untuk nilai data yang hilan
dataset_wine.isnull().sum()

"""Analisis Data dan Visualisasi"""

#stastical measures the dataset
dataset_wine.describe()

# number of values for each quality
#jumlah nilai untuk setiap class quality
sns.catplot(x = 'quality', data = dataset_wine, kind = 'count')

# volatile acidity vs quality
plot = plt.figure(figsize = (5,5))
sns.barplot(x = 'quality', y = 'volatile acidity', data = dataset_wine)

# citric acid vs quality
plot = plt.figure(figsize = (5,5))
sns.barplot(x = 'quality', y = 'citric acid', data = dataset_wine)

"""Correlation atau korelasi

Terdapat dua korelasi atau correlation :
1. korelasi positif
2. korelasi negatif
"""

correlation = dataset_wine.corr()

# constructing a heatmap to understand the correlation antara beberapa coloumns
plt.figure(figsize = (10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt = '.1f', annot = True, annot_kws={'size':8}, cmap = 'Greens')

"""Data Preprocessing"""

# separate(memisahkan) the data and label
# memisahkan data atribut dan class
X = dataset_wine.drop('quality', axis=1)

print(X)

"""Label Binarization (merubah data class ke dalam Biner)"""

Y = dataset_wine['quality'].apply(lambda y_value: 1 if y_value >= 7 else 0)

print(Y)

"""memisahkan data Train dan data Test"""

#Test_size = 0.2 adalah function untuk membagi 20% data dari keseluruhan jumlah data set ke dalam variable data test dan sisa data nya akan masuk kedalam data train 
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state = 3)

print(Y.shape, Y_train.shape, Y_test.shape)

"""Class Imbalancement"""

Y.value_counts()

from imblearn.over_sampling import SMOTE
oversample = SMOTE(k_neighbors=4)
# transform the dataset
X, Y = oversample.fit_resample(X, Y)

Y.value_counts()

"""Model Training :
Random forest Clasifier model (Decision Tree) - Multiple Decision Tree
"""

#model = RandomForestClassifier()

#clasify function
from sklearn.model_selection import cross_val_score, train_test_split
def classify(model, X, Y):
  X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.25, random_state = 42)

  #train the model
  model.fit(X_train, Y_train)
  print('Akurasi:', model.score(X_test, Y_test) * 100)

  #cross validation
  score = cross_val_score(model, X, Y, cv=5)
  print("CV Score:", np.mean(score)*100)

#model.fit(X_train, Y_train)

"""Model Evaluation - Evaluasi Hasil

Score Akurasi data
"""

#Score akurasi pada data test
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Akurasi : ', test_data_accuracy * 100)

"""Mendapatkan hasil Akurasi 92.8 % hasil akurasi tersebut melebihi 75% yang artinya klasifikasi dari metode Decesion tree mendapatkan nilai akurasi tinggi"""

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
classify(model, X, Y)

from sklearn.tree import DecisionTreeClassifier
model = DecisionTreeClassifier()
classify(model, X, Y)

from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier()
classify(model, X, Y)



"""Sistem Prediksi untuk mendapatkan wine kualitas"""

input_data = (7.8,0.58,0.02,2.0,0.073,9.0,18.0,0.9968,3.36,0.57,9.5)

#changing the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the data as we are predicting the label for only one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

prediction = model.predict(input_data_reshaped)

print(prediction)

if (prediction[0]==1):
  print('Kualitas Wine Bagus')
else:
  print('Kualitas Wine Buruk')

"""Penyebaran Grafik"""

